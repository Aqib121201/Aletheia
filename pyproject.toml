[build-system]
requires = ["setuptools>=65.0", "wheel", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "aletheia"
version = "1.2.3"
description = "Î±-fair, Cryptographically-Auditable Allocation Framework"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Saman Siddiqui", email = "saman.siddiqui@aletheia-project.org"},
    {name = "Aqib Siddiqui", email = "aqib.siddiqui@aletheia-project.org"},
]
maintainers = [
    {name = "Saman Siddiqui", email = "saman.siddiqui@aletheia-project.org"},
]
keywords = [
    "fairness",
    "zero-knowledge-proofs", 
    "resource-allocation",
    "alpha-fairness",
    "cryptographic-auditability",
    "theorem-proving",
    "convex-optimization",
    "mechanism-design",
    "housing-allocation",
    "healthcare-allocation",
    "ergodic-control",
    "stochastic-processes"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Security :: Cryptography",
    "Topic :: Sociology",
    "Typing :: Typed",
]
requires-python = ">=3.9"
dependencies = [
    # Core numerical and scientific computing
    "numpy>=1.21.0",
    "scipy>=1.7.0", 
    "pandas>=1.3.0",
    "matplotlib>=3.4.0",
    "seaborn>=0.11.0",
    
    # Machine learning and optimization
    "scikit-learn>=1.0.0",
    "cvxpy>=1.2.0",
    "cvxopt>=1.3.0",
    "pulp>=2.6.0",
    
    # Cryptography and security
    "cryptography>=3.4.0",
    "pycryptodome>=3.15.0",
    "hashlib-compat>=1.0.0",
    
    # Data structures and utilities
    "networkx>=2.6.0",
    "igraph>=0.9.0",
    "tqdm>=4.62.0",
    "click>=8.0.0",
    "pydantic>=1.8.0",
    "typing-extensions>=4.0.0",
    
    # Serialization and I/O
    "jsonschema>=4.0.0",
    "pyyaml>=6.0",
    "h5py>=3.3.0",
    "joblib>=1.1.0",
    
    # Distributed computing and parallelization
    "multiprocessing-logging>=0.3.0",
    "concurrent-futures>=3.1.0",
    
    # Statistical analysis
    "statsmodels>=0.13.0",
    "pingouin>=0.5.0",
    
    # Visualization extensions
    "plotly>=5.0.0",
    "bokeh>=2.4.0",
    
    # Configuration management
    "hydra-core>=1.1.0",
    "omegaconf>=2.1.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=2.5.0",
    "pytest-mock>=3.6.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.0.0",
    
    # Code quality
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.15.0",
    
    # Security analysis
    "bandit>=1.7.0",
    "safety>=2.0.0",
    
    # Documentation
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "myst-parser>=0.18.0",
    
    # Development utilities
    "ipython>=8.0.0",
    "ipdb>=0.13.0",
    "line_profiler>=3.5.0",
    "memory_profiler>=0.60.0",
    "py-spy>=0.3.0",
]

# Zero-knowledge proof dependencies
zk = [
    "py-ecc>=6.0.0",
    "eth-hash>=0.5.0",
    "coincurve>=17.0.0",
    "ecdsa>=0.18.0",
    "galois>=0.3.0",
]

# Academic research dependencies
research = [
    "jupyter>=1.0.0",
    "jupyterlab>=3.0.0",
    "notebook>=6.4.0",
    "nbconvert>=6.0.0",
    "papermill>=2.3.0",
    
    # Advanced analytics
    "sympy>=1.9.0",
    "mpmath>=1.2.0",
    "sage-numerical-backends-coin>=9.4.0",
    
    # Publishing and reporting
    "reportlab>=3.6.0",
    "weasyprint>=56.0",
    "jinja2>=3.0.0",
    
    # Data collection and APIs
    "requests>=2.26.0",
    "beautifulsoup4>=4.10.0",
    "python-dotenv>=0.19.0",
]

# Production deployment dependencies
production = [
    "fastapi>=0.85.0",
    "uvicorn>=0.18.0",
    "redis>=4.3.0",
    "celery>=5.2.0",
    "gunicorn>=20.1.0",
    
    # Monitoring and logging
    "prometheus-client>=0.14.0",
    "structlog>=22.1.0",
    "sentry-sdk>=1.9.0",
    
    # Database connections
    "sqlalchemy>=1.4.0",
    "psycopg2-binary>=2.9.0",
    "asyncpg>=0.26.0",
]

# Healthcare domain specific dependencies
healthcare = [
    "hl7>=4.1.0",
    "pydicom>=2.3.0",
    "SimpleITK>=2.2.0",
    "biopython>=1.79.0",
]

# Housing domain specific dependencies  
housing = [
    "geopandas>=0.11.0",
    "shapely>=1.8.0",
    "folium>=0.12.0",
    "contextily>=1.2.0",
    "osmnx>=1.2.0",
]

# Complete installation with all optional dependencies
all = [
    "aletheia[dev,zk,research,production,healthcare,housing]"
]

[project.urls]
Homepage = "https://github.com/samansiddiqui55/Aletheia"
Repository = "https://github.com/samansiddiqui55/Aletheia.git"
Documentation = "https://samansiddiqui55.github.io/Aletheia/"
"Bug Tracker" = "https://github.com/samansiddiqui55/Aletheia/issues"
Changelog = "https://github.com/samansiddiqui55/Aletheia/blob/main/CHANGELOG.md"
Discussions = "https://github.com/samansiddiqui55/Aletheia/discussions"

[project.scripts]
aletheia = "aletheia.cli:main"
aletheia-simulate = "aletheia.simulator:main"
aletheia-zk = "aletheia.zk_interface:main"
aletheia-validate = "aletheia.validators:main"
aletheia-benchmark = "aletheia.benchmarks:main"

[project.entry-points."aletheia.algorithms"]
alpha_fairness = "aletheia.algorithms.fairness:AlphaFairnessAlgorithm"
entropy_dual = "aletheia.algorithms.fairness:EntropyDualityAlgorithm"
proportional_fair = "aletheia.algorithms.fairness:ProportionalFairnessAlgorithm"
max_min_fair = "aletheia.algorithms.fairness:MaxMinFairnessAlgorithm"
weighted_lottery = "aletheia.algorithms.mechanisms:WeightedLotteryMechanism"
priority_based = "aletheia.algorithms.mechanisms:PriorityBasedMechanism"

[project.entry-points."aletheia.domains"]
housing = "aletheia.domains.housing:HousingDomain"
healthcare = "aletheia.domains.healthcare:HealthcareDomain"
general = "aletheia.domains.general:GeneralDomain"

[project.entry-points."aletheia.zk_backends"]
groth16 = "aletheia.zk.groth16:Groth16Backend"
halo2 = "aletheia.zk.halo2:Halo2Backend"
plonk = "aletheia.zk.plonk:PlonkBackend"

# Tool configurations
[tool.setuptools]
package-dir = {"" = "python"}
include-package-data = true

[tool.setuptools.packages.find]
where = ["python"]
include = ["aletheia*"]
exclude = ["tests*", "examples*"]

[tool.setuptools.package-data]
aletheia = [
    "data/*.json",
    "data/*.csv", 
    "configs/*.json",
    "configs/*.yaml",
    "schemas/*.json",
    "templates/*.j2",
    "assets/*",
    "py.typed"
]

# Black code formatter
[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

# isort import sorter
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["aletheia"]
known_third_party = [
    "numpy", "scipy", "pandas", "matplotlib", "seaborn",
    "sklearn", "cvxpy", "networkx", "click", "pydantic",
    "pytest", "hypothesis"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# MyPy static type checker
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_equality = true
show_error_codes = true
show_column_numbers = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "cvxpy.*",
    "cvxopt.*", 
    "pulp.*",
    "networkx.*",
    "igraph.*",
    "galois.*",
    "sage.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--verbose",
    "--tb=short",
    "--cov=aletheia",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests", 
    "zk: marks tests as zero-knowledge proof tests",
    "algorithms: marks tests for allocation algorithms",
    "fairness: marks tests for fairness metrics",
    "proofs: marks tests requiring Lean theorem prover",
    "benchmark: marks tests as benchmarks",
    "healthcare: marks tests specific to healthcare domain",
    "housing: marks tests specific to housing domain"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::numpy.VisibleDeprecationWarning"
]

# Coverage configuration
[tool.coverage.run]
source = ["python/aletheia"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/setup.py",
    "*/venv/*",
    "*/.tox/*"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security analyzer
[tool.bandit]
exclude_dirs = ["tests", "venv", ".tox"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process (dev only)

# Flake8 linter (via setup.cfg since flake8 doesn't support pyproject.toml yet)
# Configuration in setup.cfg

# Hypothesis property-based testing
[tool.hypothesis]
max_examples = 100
deadline = 5000
database_file = ".hypothesis/examples"

# Sphinx documentation
[tool.sphinx]
source_dir = "docs"
build_dir = "docs/_build" 
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.doctest",
    "sphinx.ext.intersphinx",
    "sphinx.ext.todo",
    "sphinx.ext.coverage",
    "sphinx.ext.mathjax",
    "sphinx.ext.ifconfig",
    "sphinx.ext.viewcode",
    "sphinx.ext.napoleon",
    "sphinx_autodoc_typehints",
    "myst_parser"
]

# Development and CI configuration
[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py{39,310,311,312}, coverage, docs, lint

[testenv]
deps = 
    pytest>=7.0
    pytest-cov>=4.0
    hypothesis>=6.0
commands = pytest {posargs}

[testenv:coverage]
deps = 
    coverage[toml]>=6.0
commands = 
    coverage run -m pytest
    coverage report
    coverage html

[testenv:docs]
deps = 
    sphinx>=5.0
    sphinx-rtd-theme>=1.0
commands = sphinx-build -W -b html docs docs/_build/html

[testenv:lint]
deps = 
    black>=22.0
    isort>=5.10
    flake8>=5.0
    mypy>=1.0
commands = 
    black --check python tests
    isort --check-only python tests
    flake8 python tests
    mypy python
"""

# Pre-commit hooks configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"},
            {id = "debug-statements"}
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "22.12.0",
        hooks = [{id = "black"}]
    },
    {
        repo = "https://github.com/pycqa/isort", 
        rev = "5.12.0",
        hooks = [{id = "isort"}]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.0.0", 
        hooks = [{id = "flake8"}]
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.0.0",
        hooks = [{id = "mypy", additional_dependencies = ["types-all"]}]
    }
]

# Performance and profiling
[tool.line_profiler]
profile_async = true

[tool.py-spy]
duration = 30
rate = 100
output = "profile.svg"

# Dependency management and security
[tool.safety]
ignore = []  # Add CVE IDs to ignore if needed
output = "json"
audit_and_monitor = true

[tool.pip-audit]
format = "json"
output = "pip-audit-report.json"
desc = true

# Build and packaging options
[tool.setuptools_scm]
write_to = "python/aletheia/_version.py"
version_scheme = "python-simplified-semver"
local_scheme = "node-and-date"

# Development environment configuration
[tool.venv]
path = "venv"
prompt = "aletheia"

# IDE configuration hints
[tool.pylsp-mypy]
enabled = true
live_mode = true
strict = true

# Jupyter notebook configuration
[tool.nbconvert]
preprocessors = [
    "nbconvert.preprocessors.ClearOutputPreprocessor",
    "nbconvert.preprocessors.ExecutePreprocessor"
]

# Custom tool configurations for Aletheia
[tool.aletheia]
# Default algorithm parameters
default_alpha = 1.0
convergence_tolerance = 1e-6
max_iterations = 1000

# ZK proof settings
zk_backend = "halo2"
proof_system = "groth16"
curve = "bn254"
security_level = 128

# Domain configurations
[tool.aletheia.domains.housing]
max_units_per_agent = 1
allocation_period_days = 90
fairness_constraints = ["envy_free", "individual_rational"]

[tool.aletheia.domains.healthcare] 
resource_types = ["beds", "appointments", "specialists"]
priority_factors = ["urgency", "wait_time", "medical_need"]
allocation_frequency = "daily"

# Experimental and research settings
[tool.aletheia.experiments]
output_directory = "experiments/results"
random_seed = 42
parallel_workers = 4
cache_results = true

# Logging configuration
[tool.aletheia.logging]
level = "INFO"
format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
handlers = ["console", "file"]
log_file = "aletheia.log"

# Performance monitoring
[tool.aletheia.monitoring]
enable_metrics = true
metrics_backend = "prometheus"
profiling_enabled = false
memory_tracking = true
